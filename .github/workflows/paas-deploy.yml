name: Deploy to PaaS

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

env:
  PAAS_API_URL: ${{ secrets.PAAS_API_URL }}
  PAAS_ACCESS_TOKEN: ${{ secrets.PAAS_ACCESS_TOKEN }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "./yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
          elif [ -f "./package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
          else
            echo "No lock file found"
            exit 1
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} install
      
      - name: Type check
        run: ${{ steps.detect-package-manager.outputs.manager }} run type-check || true
      
      - name: Lint
        run: ${{ steps.detect-package-manager.outputs.manager }} run lint || true
      
      - name: Test
        run: ${{ steps.detect-package-manager.outputs.manager }} test || true

  build:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Dockerfile if not exists
        run: |
          if [ ! -f "Dockerfile" ]; then
            echo "No Dockerfile found, creating one..."
            cat > Dockerfile << 'DOCKERFILE'
            FROM node:20-alpine AS builder
            WORKDIR /app
            COPY package*.json ./
            RUN npm install
            COPY . .
            RUN npm run build

            FROM node:20-alpine AS runner
            WORKDIR /app
            COPY --from=builder /app/.next ./.next
            COPY --from=builder /app/node_modules ./node_modules
            COPY --from=builder /app/package.json ./package.json
            COPY --from=builder /app/public ./public

            EXPOSE 3000
            CMD ["npm", "start"]
            DOCKERFILE
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    steps:
      - uses: actions/checkout@v4

      - name: Install Git and other dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl jq

      - name: Deploy to PaaS
        run: |
          # Set up error handling
          set -e
          
          # Make the API call and store the response
          response=$(curl -s -w "\n%{http_code}" -X POST "${PAAS_API_URL}/api/v1/build-and-push-deploy" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${PAAS_ACCESS_TOKEN}" \
            -d "{\"repoFullName\":\"${{ github.repository }}\",\"accessToken\":\"${{ github.token }}\"}")
          
          # Extract the HTTP status code
          http_code=$(echo "$response" | tail -n1)
          # Extract the response body
          body=$(echo "$response" | sed '$d')
          
          # Check if the request was successful
          if [ "$http_code" -ne 200 ]; then
            echo "Deployment failed with status $http_code"
            echo "Response: $body"
            exit 1
          fi
          
          echo "Deployment successful!"
          echo "Response: $body"